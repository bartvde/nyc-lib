import org.apache.tools.ant.taskdefs.condition.Os
import groovy.util.AntBuilder
import java.util.ArrayList
import com.eriwen.gradle.js.tasks.CombineJsTask
import com.eriwen.gradle.js.tasks.MinifyJsTask

plugins{
    id 'base'
    id 'jetty'
    id 'org.hidetake.ssh' version '1.1.2'
	id "com.eriwen.gradle.js" version "1.12.1"
}

ext{
	ver = 'v0.0.1-beta.1'
	remoteDir = "nyc-lib/${ver}"
	jsSrcDir = 'src/main/js/nyc'
	olJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/ol/ol.js", 
		"${jsSrcDir}/ol/draw.js", 
		"${jsSrcDir}/ol/featuretip.js", 
		"${jsSrcDir}/ol/locate.js", 
		"${jsSrcDir}/ol/popup.js", 
		"${jsSrcDir}/ol/control/zoomsearch.js",
		"${jsSrcDir}/ol/geoserver/getfeature.js", 
		"${jsSrcDir}/ol/source/arcgiscache.js", 
		"${jsSrcDir}/ol/source/decorating.js", 
		"${jsSrcDir}/ol/source/filteringandsorting.js",
		"${jsSrcDir}/ol/layer/baselayer.js"
	]
	leafJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/leaf/leaf.js", 
		"${jsSrcDir}/leaf/locate.js", 
		"${jsSrcDir}/leaf/zoomsearch.js"
	]
	cartoJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/leaf/leaf.js", 
		"${jsSrcDir}/leaf/locate.js", 
		"${jsSrcDir}/leaf/zoomsearch.js",
		"${jsSrcDir}/carto/view.js",
		"${jsSrcDir}/carto/chart.js"
	]
	olCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'draw.css', 
		'featuretip.css', 
		'lang.css', 
		'legend.css', 
		'popup.css', 
		'share.css', 
		'zoomsearch.css'
	]
	leafCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'zoomsearch.css'
	]
	cartoCssFiles = [
		'control-common.css', 
		'chart.css', 
		'collapsible.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'zoomsearch.css'
	]
}

task combineJsOl(type: CombineJsTask) {
    source = olJsFiles
    dest = file("${buildDir}/nyc-ol-lib-${ver}-all.js")
}

task combineJsLeaf(type: CombineJsTask) {
    source = leafJsFiles
    dest = file("${buildDir}/nyc-leaf-lib-${ver}-all.js")
}

task combineJsCarto(type: CombineJsTask) {
    source = cartoJsFiles
    dest = file("${buildDir}/nyc-carto-lib-${ver}-all.js")
}

task minifyJsOl(type: MinifyJsTask) {
    source = combineJsOl
    dest = file("${buildDir}/${ver}/nyc-ol-lib.js")
    sourceMap = file("${buildDir}/${ver}/nyc-ol-lib.js.map")
    closure {
	    compilationLevel = 'WHITESPACE_ONLY'
        warningLevel = 'VERBOSE'
        //output_wrapper = isWindows ? '"%%output%%//# sourceMappingURL=nyc-min.js.map"' : '--output_wrapper "%output%//# sourceMappingURL=nyc-min.js.map"'
        //output_wrapper "/* nyc-ol-lib${ver} */\n"
    }
}

task minifyJsLeaf(type: MinifyJsTask) {
    source = combineJsLeaf
    dest = file("${buildDir}/${ver}/nyc-leaf-lib.js")
    sourceMap = file("${buildDir}/${ver}/nyc-leaf-lib.js.map")
    closure {
	    compilationLevel = 'WHITESPACE_ONLY'
        warningLevel = 'VERBOSE'
    }
}

task minifyJsCarto(type: MinifyJsTask) {
    source = combineJsCarto
    dest = file("${buildDir}/${ver}/nyc-carto-lib.js")
    sourceMap = file("${buildDir}/${ver}/nyc-carto-lib.js.map")
    closure {
	    compilationLevel = 'WHITESPACE_ONLY'
        warningLevel = 'VERBOSE'
    }
}

task outputWrapperOl(dependsOn: [minifyJsOl]) << {
	def info = "/ * nyc-ol-lib${ver} */"
	def script = file("${buildDir}/${ver}/nyc-ol-lib.js")
	def src = script.text
	def wrapped = " --output_wrapper \"${info}\n${src}\n# sourceMappingURL=nyc-ol-lib.js.map\""
	script.text = wrapped
}

task outputWrapperLeaf(dependsOn: [minifyJsLeaf]) << {
	def info = "/ * nyc-leaf-lib${ver} */"
	def script = file("${buildDir}/${ver}/nyc-leaf-lib.js")
	def src = script.text
	def wrapped = " --output_wrapper \"${info}\n${src}\n# sourceMappingURL=nyc-leaf-lib.js.map\""
	script.text = wrapped
}

task outputWrapperCarto(dependsOn: [minifyJsCarto]) << {
	def info = "/ * nyc-carto-lib${ver} */"
	def script = file("${buildDir}/${ver}/nyc-carto-lib.js")
	def src = script.text
	def wrapped = " --output_wrapper \"${info}\n${src}\n# sourceMappingURL=nyc-carto-lib.js.map\""
	script.text = wrapped
}

task outputWrapper(dependsOn: [outputWrapperOl, outputWrapperLeaf, outputWrapperCarto]) << {}

task archive(type: Zip, dependsOn: [outputWrapper]) {
	archiveName = "nyc-lib-${ver}.zip"
	from {"build/${ver}"}
}

remotes {
	deployTarget {}
}

task deploy(dependsOn: []) << {
	def archiveDir = project.ext['archive.dir']
	def mobileDir = project.ext['mobile.dir']
	def deployDir = "${mobileDir}/${remoteDir}"
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir ${archiveDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.9'
}
