import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'base'
    id 'jetty'
    id 'org.hidetake.ssh' version '1.1.2'
	id 'com.eriwen.gradle.css' version '1.11.1'
}

repositories {
  mavenCentral()
}
configurations {
  closureCompiler
}
dependencies {
  closureCompiler 'com.google.javascript:closure-compiler:v20150609'
}

ext {
	ver = 'v0.0.2'
	isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
	remoteDir = "nyc-lib/${ver}"
	jsSrcDir = "${projectDir}/src/main/js"
	cssSrcDir = "${projectDir}/src/main/css"
	imgDir = "${projectDir}/src/main/img/"
	olJsFiles = [
		'nyc/nyc.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/ol/ol.js', 
		'nyc/ol/draw.js', 
		'nyc/ol/featuretip.js', 
		'nyc/ol/locate.js', 
		'nyc/ol/popup.js', 
		'nyc/ol/control/zoomsearch.js',
		'nyc/ol/geoserver/getfeature.js', 
		'nyc/ol/source/arcgiscache.js', 
		'nyc/ol/source/decorating.js', 
		'nyc/ol/source/filteringandsorting.js',
		'nyc/ol/layer/baselayer.js'
	]
	leafJsFiles = [
		'nyc/nyc.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/leaf/leaf.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/zoomsearch.js'
	]
	cartoJsFiles = [
		'nyc/nyc.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/leaf/leaf.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/zoomsearch.js',
		'nyc/carto/view.js',
		'nyc/carto/chart.js'
	]
	olCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'draw.css', 
		'featuretip.css', 
		'lang.css', 
		'legend.css', 
		'popup.css', 
		'share.css', 
		'zoomsearch.css'
	]
	leafCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'zoomsearch.css'
	]
	cartoCssFiles = [
		'control-common.css', 
		'chart.css', 
		'collapsible.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'zoomsearch.css'
	]
}

task jsDoc(type: JsDoc) {
	sourceDir = "${jsSrcDir}/nyc"
	destinationDir = "${buildDir}/${ver}/doc"
}

task minifyJsOl(type: MinifyJs) {
	version = ver
	libName = 'nyc-ol-lib'
	fileNames = olJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${buildDir}/${ver}/js"
	isWindows = isWindows
}

task minifyJsLeaf(type: MinifyJs) {
	version = ver
	libName = 'nyc-leaf-lib'
	fileNames = leafJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${buildDir}/${ver}/js"
	isWindows = isWindows
}

task minifyJsCarto(type: MinifyJs) {
	version = ver
	libName = 'nyc-carto-lib'
	fileNames = leafJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${buildDir}/${ver}/js"
	isWindows = isWindows
}

task minifyCssOl(type: MinifyCss) {
	libName = 'nyc-ol-lib'
	fileNames = olCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${buildDir}/${ver}/css"
}

task minifyCssLeaf(type: MinifyCss) {
	libName = 'nyc-leaf-lib'
	fileNames = leafCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${buildDir}/${ver}/css"
}

task minifyCssCarto(type: MinifyCss) {
	libName = 'nyc-carto-lib'
	fileNames = cartoCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${buildDir}/${ver}/css"
}

task allJs(dependsOn: [minifyJsOl, minifyJsLeaf, minifyJsCarto]) << {}
task allCss(dependsOn: [minifyCssOl, minifyCssLeaf, minifyCssCarto]) << {}
task buildLibs(dependsOn: [allJs, allCss]) << {}
buildLibs.doFirst {
	copy {
		from imgDir
		include '*'
		into "${buildDir}/${ver}/img"
	}
	copy {
		from imgDir
		include '*'
		into "${buildDir}/${ver}/src/img"
	}
}

task archive(type: Zip, dependsOn: [buildLibs, jsDoc]) {
	archiveName = "nyc-lib-${ver}.zip"
	from {"${buildDir}/${ver}"}
}

remotes {
	deployTarget {}
}

task deploy(dependsOn: []) << {
	def archiveDir = project.ext['archive.dir']
	def mobileDir = project.ext['mobile.dir']
	def deployDir = "${mobileDir}/${remoteDir}"
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir ${archiveDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.9'
}

class JsDoc extends DefaultTask {
	def jsdocDir = '../node_modules/jsdoc'
	def sourceDir = ''
	def destinationDir = ''
	@TaskAction
	public void build(){
		def docs = new File(destinationDir)
		def cmd = new File("${jsdocDir}/jsdoc.js")
		if (cmd.exists()){
			docs.mkdirs()
			cmd = "${cmd} --verbose --recurse ${sourceDir} --destination ${destinationDir}"
			def proc = cmd.execute()
			proc.waitForProcessOutput(System.out, System.err)
		}else{
			throw new FileNotFoundException(
				"File '${jsdocDir}/jsdoc.js' not found! Is jsdoc installed? Set 'jsdocDir' property on task '${this.getName()}'."
			)
		}
	}
}

class MinifyCss extends DefaultTask {
	def libName = ''
	def fileNames = []
	def sourceDir = ''
	def destinationDir = ''
	@TaskAction
	public void minify(){
		def dir = new File(destinationDir)
		dir.mkdirs()
		def cssOut = new File("${destinationDir}/${libName}.css")
		for (def i = 0; i < fileNames.size(); i++) {
			def css = new File("${sourceDir}/${fileNames[i]}").getText('UTF-8')
			css = css.replaceAll(/[\n\r]+\s*/, '')
			css = css.replaceAll(/\s+/, ' ')
			css = css.replaceAll(/\s?([:,;{}])\s?/, '$1')
			css = css.replaceAll(/([\s:]0)(px|pt|%|em)/, '$1')
			css = css.replaceAll(/\/\*[\d\D]*?\*\//, '')
			cssOut.append(css)
			this.copySource(fileNames[i])
		}		
	}
	private void copySource(String file){
		ant.copy(file: "${sourceDir}/${file}", tofile: "${destinationDir}/../src/css/${file}")
	}
}

class MinifyJs extends JavaExec {
	def isWindows = false
	def libName = ''
	def version = ''
	def fileNames = []
	def sourceDir = ''
	def destinationDir = ''
	def compilationLevel = 'WHITESPACE_ONLY'
	def warningLevel = 'VERBOSE'
	def sourceMapLocationMapping = '' 
	def compilerOptions = []
	def comment = '' 
	public MinifyJs() {
		main 'com.google.javascript.jscomp.CommandLineRunner'
		classpath project.configurations.closureCompiler
	}
	@TaskAction
	@Override
	public void exec(){
		def arguments = []
		for (def i = 0; i < fileNames.size(); i++) {
		  	arguments << "${sourceDir}/${fileNames[i]}"
		  	this.copySource(fileNames[i])
		}
		for (def i = 0; i < compilerOptions.size(); i++) {
		  	arguments << compilerOptions[i]
		}
		arguments << '--charset=utf8'
		arguments << "--warning_level=${warningLevel}"
		arguments << "--compilation_level=${compilationLevel}"
		arguments << "--create_source_map=${libName}.sourcemap.json"
		arguments << "--js_output_file=${libName}.js"
		arguments << "--source_map_location_mapping=\"${this.getSourceMapLocationMapping()}\""
		arguments << "--output_wrapper=${this.getOutputWrapper()}"
		args arguments
		super.exec();
		this.move()
	}
	private void copySource(String file){
		ant.copy(file: "${sourceDir}/${file}", tofile: "${destinationDir}/../src/js/${file}")
	}
	private String getOutputWrapper(){
		def output = isWindows ? '%%output%%' : '%output%'
		def name = "${libName}-${version}"
		def block = comment != '' ? "${name}\n\n${comment}" : name
		return "/*\n\n${block}\n\n*/\n${output}\n//# sourceMappingURL=${libName}.sourcemap.json"
	}
	private String getSourceMapLocationMapping(){
		if (sourceMapLocationMapping != '') return sourceMapLocationMapping;
		return "${sourceDir}|../src/js"
	}
	private void move(){
		def dir = new File(destinationDir)
		dir.mkdirs()
		ant.move(file: "${libName}.js", todir: destinationDir)
		ant.move(file: "${libName}.sourcemap.json", todir: destinationDir)	
	}
}