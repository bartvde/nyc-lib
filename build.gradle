import gov.nyc.doitt.nyc.gis.gradle.*

plugins {
    id 'base'
    id 'jetty'
    id 'org.hidetake.ssh' version '1.1.2'
}

ext {
	ver = 'v0.0.3-SNAPSHOT'
	remoteDir = "nyc-lib/${ver}"
	jsSrcDir = "${projectDir}/src/main/js"
	cssSrcDir = "${projectDir}/src/main/css"
	olJsFiles = [
		'nyc/nyc.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/ol/ol.js', 
		'nyc/ol/featuretip.js', 
		'nyc/ol/locate.js', 
		'nyc/ol/popup.js', 
		'nyc/ol/control/zoomsearch.js',
		'nyc/ol/source/arcgiscache.js', 
		'nyc/ol/source/decorating.js', 
		'nyc/ol/source/filteringandsorting.js',
		'nyc/ol/layer/baselayer.js'
	]
	olRedLineJsFiles = [
		'nyc/ol/draw.js', 
		'nyc/ol/geoserver/getfeature.js'
	]
	leafJsFiles = [
		'nyc/nyc.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/leaf/leaf.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/zoomsearch.js'
	]
	cartoJsFiles = [
		'nyc/nyc.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/leaf/leaf.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/zoomsearch.js',
		'nyc/carto/view.js',
		'nyc/carto/chart.js'
	]
	olCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'draw.css', 
		'featuretip.css', 
		'lang.css', 
		'legend.css', 
		'popup.css', 
		'share.css', 
		'zoomsearch.css'
	]
	olRedLineCssFiles = [
		'draw.css'
	]
	leafCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'zoomsearch.css'
	]
	cartoCssFiles = [
		'control-common.css', 
		'chart.css', 
		'collapsible.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'zoomsearch.css'
	]
}

task jsDoc(type: JsDocTask) {
	sourceDir = "src/main/js/nyc"
	destinationDir = "build/${ver}/doc"
	conf = 'etc/jsdoc/conf.json'
	doFirst {
		file('build/jsdoc').mkdirs()
		def host = 'https://maps.nyc.gov'
		if (project.hasProperty('env') && project.hasProperty("${env}.nyclib.host")){
			host = project.ext["${env}.nyclib.host"]
		}
		def tmpl = file('build/jsdoc/layout.tmpl')
		tmpl << file('etc/jsdoc/layout.tmpl').text
		tmpl.text = tmpl.text.replaceAll('@@NYC-LIB-VER@@', ver)
		tmpl.text = tmpl.text.replaceAll('@@NYC-LIB-URL@@', "${host}/${ver}")
	}
	doLast {
		delete 'build/jsdoc'
	}
}

task minifyJsOl(type: MiniJsTask) {
	version = ver
	libName = 'nyc-ol-lib'
	fileNames = olJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${buildDir}/${ver}/js"
}

task minifyJsOlRedLine(type: MiniJsTask) {
	version = ver
	libName = 'nyc-ol-redline-lib'
	fileNames = olRedLineJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${buildDir}/${ver}/js"
}

task minifyJsLeaf(type: MiniJsTask) {
	version = ver
	libName = 'nyc-leaf-lib'
	fileNames = leafJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${buildDir}/${ver}/js"
}

task minifyJsCarto(type: MiniJsTask) {
	version = ver
	libName = 'nyc-carto-lib'
	fileNames = cartoJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${buildDir}/${ver}/js"
}

task minifyCssOl(type: MiniCssTask) {
	libName = 'nyc-ol-lib'
	fileNames = olCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${buildDir}/${ver}/css"
}

task minifyCssOlRedLine(type: MiniCssTask) {
	libName = 'nyc-ol-redline-lib'
	fileNames = olRedLineCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${buildDir}/${ver}/css"
}

task minifyCssLeaf(type: MiniCssTask) {
	libName = 'nyc-leaf-lib'
	fileNames = leafCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${buildDir}/${ver}/css"
}

task minifyCssCarto(type: MiniCssTask) {
	libName = 'nyc-carto-lib'
	fileNames = cartoCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${buildDir}/${ver}/css"
}

task allJs(dependsOn: [minifyJsOl, minifyJsOlRedLine, minifyJsLeaf, minifyJsCarto]) << {}
task allCss(dependsOn: [minifyCssOl, minifyCssOlRedLine, minifyCssLeaf, minifyCssCarto]) << {}
task buildLibs(dependsOn: [allJs, allCss]) << {}

task archive(type: Zip, dependsOn: [buildLibs, jsDoc]) {
	archiveName = "nyc-lib-${ver}.zip"
	from {"${buildDir}/${ver}"}
}

remotes {
	deployTarget {}
}

task deploy(dependsOn: [archive]) << {
	def archiveDir = project.ext['archive.dir']
	def mobileDir = project.ext['mobile.dir']
	def deployDir = "${mobileDir}/${remoteDir}"
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir -p ${archiveDir}"
        	execute "mkdir -p ${deployDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
        }
    }
}

[jettyRun]*.with {
    webXml = file("etc/jetty/webdefault.xml")
}

jettyRun {
	webAppSourceDirectory file('./')
	contextPath ''
	httpPort 8088
	stopPort 8090
	stopKey 'stopKey'
	reload 'automatic'
	scanIntervalSeconds 2
}
jettyRun.doFirst { 
	if (project.hasProperty('git.geoclient.url')){
	    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: 'src/test/js/setup-teardown.js', token: project.ext['git.geoclient.url'], value: project.ext['test.geoclient.url'])
	}
}

jettyStop {
	stopPort 8090
	stopKey 'stopKey'
}
jettyStop.doFirst { 
	if (project.hasProperty('git.geoclient.url')){
	    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: 'src/test/js/setup-teardown.js', token: project.ext['test.geoclient.url'], value: project.ext['git.geoclient.url'])
	}
}

task wrapper(type: Wrapper) {
    gradleVersion '2.9'
}
