import gov.nyc.doitt.nyc.gis.gradle.*

plugins {
    id 'base'
    id 'jetty'
    id 'org.hidetake.ssh' version '1.1.2'
}

ext {
	appName = 'nyc-lib'
	ver = 'v0.1.3-SNAPSHOT'
	pkgDir = "${buildDir}/${appName}/${ver}"
	remoteDir = "${appName}/${ver}"
	srcDir = "${projectDir}/src/main"
	jsSrcDir = "${srcDir}/js"
	cssSrcDir = "${srcDir}/css"
	olJsFiles = [
		'nyc/nyc.js', 
		'nyc/util.js', 
		'nyc/template.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-choice.js',
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/dialog.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/locationmgr.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/ol/ol.js', 
		'nyc/ol/featuretip.js', 
		'nyc/ol/locate.js', 
		'nyc/ol/locator.js', 
		'nyc/ol/popup.js', 
		'nyc/ol/control/zoomsearch.js',
		'nyc/ol/source/arcgiscache.js', 
		'nyc/ol/source/csv.js', 
		'nyc/ol/source/decorating.js', 
		'nyc/ol/source/filteringandsorting.js',
		'nyc/ol/layer/baselayer.js',
		'nyc/ol/layer/grayscale.js'
	]
	olRedLineJsFiles = [
		'nyc/ol/draw.js', 
		'nyc/ol/geoserver/getfeature.js'
	]
	leafJsFiles = [
		'nyc/nyc.js', 
		'nyc/util.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-choice.js',
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/dialog.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/locationmgr.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/leaf/leaf.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/locator.js', 
		'nyc/leaf/zoomsearch.js'
	]
	cartoJsFiles = [
		'nyc/nyc.js', 
		'nyc/util.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-choice.js',
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/dialog.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/locationmgr.js', 
		'nyc/share.js',
		'nyc/zoomsearch.js',
		'nyc/leaf/leaf.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/locator.js', 
		'nyc/leaf/zoomsearch.js',
		'nyc/carto/carto.js',
		'nyc/carto/symbolizer.js',
		'nyc/carto/heatsymbolizer.js',
		'nyc/carto/jenkssymbolizer.js',
		'nyc/carto/chart.js',
		'nyc/carto/view.js',
		'nyc/carto/sqlview.js',
		'nyc/carto/popup.js'
	]
	olCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'dialog.css', 
		'draw.css', 
		'featuretip.css', 
		'lang.css', 
		'legend.css', 
		'ol-popup.css', 
		'share.css', 
		'zoomsearch.css'
	]
	olRedLineCssFiles = [
		'draw.css'
	]
	leafCssFiles = [
		'control-common.css', 
		'collapsible.css', 
		'dialog.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'zoomsearch.css'
	]
	cartoCssFiles = [
		'control-common.css', 
		'chart.css', 
		'collapsible.css', 
		'dialog.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'share.css', 
		'carto-popup.css', 
		'zoomsearch.css'
	]
}

task npmPackage(type: NpmPackageTask) {
	packageFile = "${pkgDir}/package.json"
	libName = appName
	version = ver
	license = 'Apache-2.0'
	desc = 'A collection of javascript libraries used in the development New York City mapping applications'
	author = 'Tim Keane'
	contributors = []
	gitHubUrl = 'https://github.com/timkeane/nyc-lib/'
	keywords = ['ol3', 'CartoDB', 'LeafletJS', 'ChartJS']
	dependencies = [
		ol3: '> 3.11.0', 
		CartoDB: '> 3.14', 
		ChartJS: '> 1.0.1',
		proj4js: '> 2.3.10', 
		JQuery: '> 1.11.0'
	]
}

task examples() << {
	copy {
		from 'examples'
		include '**'
		into "${pkgDir}/examples"
	}
	def examples = fileTree("${pkgDir}/examples")
	def jsexp = /<!-- nyc js -->([\s\S]*?)<!-- nyc js -->/
	def cssexp = /<!-- nyc css -->([\s\S]*?)<!-- nyc css -->/
	def geoid = ''
	def geokey = ''
	if (project.hasProperty('nyc-lib.example.geoclient.app.id')){
		geoid = project.ext['nyc-lib.example.geoclient.app.id']
		geokey = project.ext['nyc-lib.example.geoclient.app.key']
	}
	examples.each{File file ->
		if (file.name.indexOf('.html') > -1) {
			def origHtml = file.text
			def newHtml = origHtml
			if (file.name.indexOf('ol-redline-') == 0){
				newHtml = (origHtml =~ jsexp).replaceFirst('<script src="../js/nyc-ol-redline-lib.js"></script>')
				newHtml = (newHtml =~ cssexp).replaceFirst('<link rel="stylesheet" href="../css/nyc-ol-redline-lib.css">')
			}else if (file.name.indexOf('ol-') == 0){
				newHtml = (origHtml =~ jsexp).replaceAll('<script src="../js/nyc-ol-lib.js"></script>')
				newHtml = (newHtml =~ cssexp).replaceAll('<link rel="stylesheet" href="../css/nyc-ol-lib.css">')
			}else if (file.name.indexOf('carto-') == 0){
				newHtml = (origHtml =~ jsexp).replaceFirst('<script src="../js/nyc-carto-lib.js"></script>')
				newHtml = (newHtml =~ cssexp).replaceFirst('<link rel="stylesheet" href="../css/nyc-carto-lib.css">')
			}else{
				newHtml = (origHtml =~ jsexp).replaceFirst('<script src="../js/nyc-leaf-lib.js"></script>')
				newHtml = (newHtml =~ cssexp).replaceFirst('<link rel="stylesheet" href="../css/nyc-leaf-lib.css">')
			}
			newHtml = (newHtml =~ /YOUR_APP_ID/).replaceFirst(geoid)
			newHtml = (newHtml =~ /YOUR_APP_KEY/).replaceFirst(geokey)
			file.write(newHtml)
		}
	}
}

task jsDoc(type: JsDocTask, dependsOn: [npmPackage, examples]) {
	def host = 'https://maps.nyc.gov'
	if (project.hasProperty('env') && project.hasProperty("${env}.nyclib.host")){
		host = project.ext["${env}.nyclib.host"]
	}
	sourceDir = "src/main/js/nyc"
	packageFile = "${pkgDir}/package.json"
	destinationDir = "build/jsdoc"
	conf = 'etc/jsdoc/conf.json'
	doFirst {
		file('build/jsdoc').mkdirs()
		def tmpl = file('build/jsdoc/layout.tmpl')
		tmpl << file('etc/jsdoc/layout.tmpl').text
		tmpl.text = tmpl.text.replaceAll('@@NYC-LIB-VER@@', ver)
		tmpl.text = tmpl.text.replaceAll('@@NYC-LIB-URL@@', "${host}/${ver}")
	}
	doLast {
		copy {
			from "${buildDir}/jsdoc/${appName}/${ver}"
			include '**'
			into "${pkgDir}/doc"
		}
		delete 'build/jsdoc'
		ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: "${pkgDir}/examples/ol-facility-container-min.html", token: '../doc/', value: "${host}/nyc-lib/${ver}/doc/")
		ant.replace(file: "${pkgDir}/examples/ol-facility-container.html", token: '../doc/', value: "${host}/nyc-lib/${ver}/doc/")
	}
}

task minifyJsOl(type: MiniJsTask) {
	version = ver
	libName = 'nyc-ol-lib'
	fileNames = olJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}
minifyJsOl.doLast {
	if (project.hasProperty('env')){
		if (env == 'stg'){
			/* change URLs for basemap tiles */
		    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps1.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps2.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps3.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps1.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps2.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps3.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
		}
	}
}

task minifyJsOlRedLine(type: MiniJsTask) {
	version = ver
	libName = 'nyc-ol-redline-lib'
	fileNames = olRedLineJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}

task minifyJsLeaf(type: MiniJsTask) {
	version = ver
	libName = 'nyc-leaf-lib'
	fileNames = leafJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}

task minifyJsCarto(type: MiniJsTask) {
	version = ver
	libName = 'nyc-carto-lib'
	fileNames = cartoJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}

task minifyCssOl(type: MiniCssTask) {
	libName = 'nyc-ol-lib'
	fileNames = olCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task minifyCssOlRedLine(type: MiniCssTask) {
	libName = 'nyc-ol-redline-lib'
	fileNames = olRedLineCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task minifyCssLeaf(type: MiniCssTask) {
	libName = 'nyc-leaf-lib'
	fileNames = leafCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task minifyCssCarto(type: MiniCssTask) {
	libName = 'nyc-carto-lib'
	fileNames = cartoCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task allJs(dependsOn: [minifyJsOl, minifyJsOlRedLine, minifyJsLeaf, minifyJsCarto]) << {}
allJs.doLast {
	copy {
		from srcDir
		include 'js/nyc/ie/legacy/mutationobserver.js'
		into "${pkgDir}/src"
	}
}

task allCss(dependsOn: [minifyCssOl, minifyCssOlRedLine, minifyCssLeaf, minifyCssCarto]) << {}
allCss.doLast {
	copy {
		from srcDir
		include 'img/**'
		into pkgDir
	}
	copy {
		from srcDir
		include 'img/**'
		into "${pkgDir}/src"
	}
}
task buildLibs(dependsOn: [allJs, allCss]) << {}

task archiveIframeExample(type: Zip, dependsOn: [buildLibs, jsDoc]) {
	archiveName = "nyc-lib-iframe-example-${ver}.zip"
	from ("${pkgDir}/examples")
	include 'ol-facility-*'
	include 'data/upk.csv'
	include 'js/*'
	include 'css/*'
	include 'img/*'
}

task archive(type: Zip, dependsOn: [archiveIframeExample]) {
	archiveName = "nyc-lib-${ver}.zip"
	from {pkgDir}
}

remotes {
	deployTarget {}
}

task deploy(dependsOn: [archive]) << {
	def mobileDir = project.ext['mobile.dir']
	def archiveDir = "${mobileDir}/${appName}/archive"
	def deployDir = "${mobileDir}/${remoteDir}"
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir -p ${archiveDir}"
        	execute "mkdir -p ${deployDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            put "build/distributions/${archiveIframeExample.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
            execute "ls -I *.html -I archive ${mobileDir}/${appName} > ${mobileDir}/${appName}/index.html"
            get "${mobileDir}/${appName}/index.html", 'index.list'
		}
	}
	
	def index = file('index.html')
	index.append '<!DOCTYPE html><html><head><title>nyc-lib</title><style>body{font-family:arial;}</style></head><body><h1>nyc-lib</h1>'
	def list = file('index.list')
	def versions = []
	def line
	list.withReader { reader ->
		while ((line = reader.readLine()) != null) {
			versions.add(line)
		}
	}
	Collections.sort(versions, Collections.reverseOrder())
	versions.forEach { aVer ->
		index.append "<h3>${aVer}</h3>"
		index.append '<ul>'
		index.append "<li><a href=\"${aVer}/doc/index.html\">Documentation</a></li>"
		index.append "<li><a href=\"${aVer}/examples/index.html\">Examples</a></li>"
		index.append "<li><a href=\"archive/nyc-lib-${aVer}.zip\">nyc-lib-${aVer}.zip</a></li>"
		if (aVer.split('-')[0].substring(1).replace(/./, '').toInteger() >= 11){
			index.append "<li><a href=\"archive/nyc-lib-iframe-example-${aVer}.zip\">nyc-lib-frame-example-${aVer}.zip</a></li>"
		}
		index.append '</ul>'
	}
	index.append '</body></html>'

	ssh.run {
        session(remotes.deployTarget) {
            put 'index.html', "${mobileDir}/${appName}"
        }
    }
    delete 'index.html'
    delete 'index.list'
}

[jettyRun]*.with {
    webXml = file("etc/jetty/webdefault.xml")
}

jettyRun {
	webAppSourceDirectory file('./')
	contextPath ''
	httpPort 8088
	stopPort 8090
	stopKey 'stopKey'
	reload 'automatic'
	scanIntervalSeconds 2
}
jettyRun.doFirst { 
	if (project.hasProperty('git.geoclient.url')){
	    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: 'src/test/js/setup-teardown.js', token: project.ext['git.geoclient.url'], value: project.ext['test.geoclient.url'])
	}
}

jettyStop {
	stopPort 8090
	stopKey 'stopKey'
}
jettyStop.doFirst { 
	if (project.hasProperty('git.geoclient.url')){
	    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: 'src/test/js/setup-teardown.js', token: project.ext['test.geoclient.url'], value: project.ext['git.geoclient.url'])
	}
}

task wrapper(type: Wrapper) {
    gradleVersion '2.9'
}
