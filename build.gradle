import org.apache.tools.ant.taskdefs.condition.Os
import groovy.util.AntBuilder
import java.util.ArrayList
import com.eriwen.gradle.js.tasks.CombineJsTask
import com.eriwen.gradle.js.tasks.MinifyJsTask
import com.eriwen.gradle.css.tasks.CombineCssTask
import com.eriwen.gradle.css.tasks.MinifyCssTask

plugins{
    id 'base'
    id 'jetty'
    id 'org.hidetake.ssh' version '1.1.2'
	id 'com.eriwen.gradle.js' version '1.12.1'
	id 'com.eriwen.gradle.css' version '1.11.1'
}

ext{
	ver = 'v0.0.1-beta.1'
	remoteDir = "nyc-lib/${ver}"
	jsSrcDir = 'src/main/js/nyc'
	cssSrcDir = 'src/main/css'
	olJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/ol/ol.js", 
		"${jsSrcDir}/ol/draw.js", 
		"${jsSrcDir}/ol/featuretip.js", 
		"${jsSrcDir}/ol/locate.js", 
		"${jsSrcDir}/ol/popup.js", 
		"${jsSrcDir}/ol/control/zoomsearch.js",
		"${jsSrcDir}/ol/geoserver/getfeature.js", 
		"${jsSrcDir}/ol/source/arcgiscache.js", 
		"${jsSrcDir}/ol/source/decorating.js", 
		"${jsSrcDir}/ol/source/filteringandsorting.js",
		"${jsSrcDir}/ol/layer/baselayer.js"
	]
	leafJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/leaf/leaf.js", 
		"${jsSrcDir}/leaf/locate.js", 
		"${jsSrcDir}/leaf/zoomsearch.js"
	]
	cartoJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/leaf/leaf.js", 
		"${jsSrcDir}/leaf/locate.js", 
		"${jsSrcDir}/leaf/zoomsearch.js",
		"${jsSrcDir}/carto/view.js",
		"${jsSrcDir}/carto/chart.js"
	]
	olCssFiles = [
		"${cssSrcDir}/control-common.css", 
		"${cssSrcDir}/collapsible.css", 
		"${cssSrcDir}/directions.css", 
		"${cssSrcDir}/draw.css", 
		"${cssSrcDir}/featuretip.css", 
		"${cssSrcDir}/lang.css", 
		"${cssSrcDir}/legend.css", 
		"${cssSrcDir}/popup.css", 
		"${cssSrcDir}/share.css", 
		"${cssSrcDir}/zoomsearch.css"
	]
	leafCssFiles = [
		"${cssSrcDir}/control-common.css", 
		"${cssSrcDir}/collapsible.css", 
		"${cssSrcDir}/directions.css", 
		"${cssSrcDir}/lang.css", 
		"${cssSrcDir}/legend.css", 
		"${cssSrcDir}/share.css", 
		"${cssSrcDir}/zoomsearch.css"
	]
	cartoCssFiles = [
		"${cssSrcDir}/control-common.css", 
		"${cssSrcDir}/chart.css", 
		"${cssSrcDir}/collapsible.css", 
		"${cssSrcDir}/directions.css", 
		"${cssSrcDir}/lang.css", 
		"${cssSrcDir}/legend.css", 
		"${cssSrcDir}/share.css", 
		"${cssSrcDir}/zoomsearch.css"
	]
}

task combineJsOl(type: CombineJsTask) {
    source = olJsFiles
    dest = file("${buildDir}/nyc-ol-lib-debug.js")
}

task combineJsLeaf(type: CombineJsTask) {
    source = leafJsFiles
    dest = file("${buildDir}/nyc-leaf-lib-debug.js")
}

task combineJsCarto(type: CombineJsTask) {
    source = cartoJsFiles
    dest = file("${buildDir}/nyc-carto-lib-debug.js")
}

task minifyJsOl(type: MinifyJsTask) {
    source = combineJsOl
    dest = file("${buildDir}/${ver}/nyc-ol-lib.js")
    sourceMap = file("${buildDir}/${ver}/nyc-ol-lib.js.map")
    closure {
	    compilationLevel = 'WHITESPACE_ONLY'
        warningLevel = 'VERBOSE'
        //output_wrapper = isWindows ? '"%%output%%//# sourceMappingURL=nyc-min.js.map"' : '--output_wrapper "%output%//# sourceMappingURL=nyc-min.js.map"'
        //output_wrapper "/* nyc-ol-lib${ver} */\n"
    }
}

task minifyJsLeaf(type: MinifyJsTask) {
    source = combineJsLeaf
    dest = file("${buildDir}/${ver}/nyc-leaf-lib.js")
    sourceMap = file("${buildDir}/${ver}/nyc-leaf-lib.js.map")
    closure {
	    compilationLevel = 'WHITESPACE_ONLY'
        warningLevel = 'VERBOSE'
    }
}

task minifyJsCarto(type: MinifyJsTask) {
    source = combineJsCarto
    dest = file("${buildDir}/${ver}/nyc-carto-lib.js")
    sourceMap = file("${buildDir}/${ver}/nyc-carto-lib.js.map")
    closure {
	    compilationLevel = 'WHITESPACE_ONLY'
        warningLevel = 'VERBOSE'
    }
}

task combineCssOl(type: CombineCssTask) {
    source = olCssFiles
    dest = "${buildDir}/nyc-ol-lib-all.css"
}

task combineCssLeaf(type: CombineCssTask) {
    source = leafCssFiles
    dest = "${buildDir}/nyc-leaf-lib-all.css"
}

task combineCssCarto(type: CombineCssTask) {
    source = cartoCssFiles
    dest = "${buildDir}/nyc-carto-lib-all.css"
}

task minifyCssOl(type: MinifyCssTask) {
    source = combineCssOl
    dest = "${buildDir}/${ver}/nyc-ol-lib.css"
    yuicompressor {
        lineBreakPos = -1
    }
}

task minifyCssLeaf(type: MinifyCssTask) {
    source = combineCssLeaf
    dest = "${buildDir}/${ver}/nyc-leaf-lib.css"
    yuicompressor {
        lineBreakPos = -1
    }
}

task minifyCssCarto(type: MinifyCssTask) {
    source = combineCssCarto
    dest = "${buildDir}/${ver}/nyc-carto-lib.css"
    yuicompressor {
        lineBreakPos = -1
    }
}

task appendSrcMappingOl(dependsOn: [minifyJsOl]) << {
	def info = "/ * nyc-ol-lib${ver} */"
	def script = file("${buildDir}/${ver}/nyc-ol-lib.js")
	script.append("\n//# sourceMappingURL=nyc-ol-lib-${ver}.js.map")
}

task appendSrcMappingLeaf(dependsOn: [minifyJsLeaf]) << {
	def info = "/ * nyc-leaf-lib${ver} */"
	def script = file("${buildDir}/${ver}/nyc-leaf-lib.js")
	script.append("\n//# sourceMappingURL=nyc-leaf-lib-${ver}.js.map")
}

task appendSrcMappingCarto(dependsOn: [minifyJsCarto]) << {
	def info = "/ * nyc-carto-lib${ver} */"
	def script = file("${buildDir}/${ver}/nyc-carto-lib.js")
	script.append("\n//# sourceMappingURL=nyc-carto-lib-${ver}.js.map")
}

task appendSrcMapping(dependsOn: [appendSrcMappingOl, appendSrcMappingLeaf, appendSrcMappingCarto]) << {}
task allCss(dependsOn: [minifyCssOl, minifyCssLeaf, minifyCssCarto]) << {}

task archive(type: Zip, dependsOn: [appendSrcMapping, allCss]) {
	archiveName = "nyc-lib-${ver}.zip"
	from {"build/${ver}"}
}
archive.doFirst {
	copy {
		from 'build'
		include '*-debug.js'
		into "build/${ver}"
	}
}

remotes {
	deployTarget {}
}

task deploy(dependsOn: []) << {
	def archiveDir = project.ext['archive.dir']
	def mobileDir = project.ext['mobile.dir']
	def deployDir = "${mobileDir}/${remoteDir}"
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir ${archiveDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.9'
}
