import gov.nyc.doitt.nyc.gis.gradle.*

plugins {
    id 'base'
    id 'org.hidetake.ssh' version '1.1.2'
    id 'groovy'
}

sourceSets{
	test {
		groovy {
			srcDirs = ['src/test/groovy']
		}
	}
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.1.5'
    testCompile group: 'com.googlecode.ez-vcard', name: 'ez-vcard', version: '0.9.8'
}

ext {
	appName = 'nyc-lib'
	ver = 'v0.2.4-SNAPSHOT'
	pkgDir = "${buildDir}/${appName}/${ver}"
	remoteDir = "${appName}/${ver}"
	srcDir = "${projectDir}/src/main"
	jsSrcDir = "${srcDir}/js"
	cssSrcDir = "${srcDir}/css"
	localhost = 'http://localhost'
	tilehost = 'http://localhost'
	localhostDeployedBuildPath = '/git/nyc-lib/build'
	olJsStyles = [
		'nyc/ol/style/dcp/zoning.js'
	]
	jsInfoTemplates = [
		'nyc/info/template/citymap.js'
	]
	olJsFiles = [
		'nyc/nyc.js', 
		'nyc/date.js', 
		'nyc/jq.js', 
		'nyc/util.js', 
		'nyc/basemap.js', 
		'nyc/ctlcontainer.js', 
		'nyc/template.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-choice.js',
		'nyc/collapsible-radio.js',
		'nyc/collapsible-check.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/dialog.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/locationmgr.js', 
		'nyc/menu.js', 
		'nyc/share.js',
		'nyc/listpager.js',
		'nyc/zoomsearch.js',
		'nyc/info/info.js', 
		'nyc/info/renderer.js', 
		'nyc/ol/ol.js', 
		'nyc/ol/style/mvt.js', 
		'nyc/ol/basemap.js', 
		'nyc/ol/featuretip.js', 
		'nyc/ol/locate.js', 
		'nyc/ol/locator.js', 
		'nyc/ol/popup.js', 
		'nyc/ol/control/layerpicker.js',
		'nyc/ol/control/layermgr.js',
		'nyc/ol/control/layerfade.js',
		'nyc/ol/control/layerswipe.js',
		'nyc/ol/control/zoomsearch.js',
		'nyc/ol/source/arcgiscache.js', 
		'nyc/ol/source/csv.js', 
		'nyc/ol/source/decorating.js', 
		'nyc/ol/source/filteringandsorting.js',
		'nyc/ol/layer/baselayer.js',
		'nyc/ol/layer/grayscale.js',
		'nyc/ol/layer/colorswap.js',
		'nyc/jcard/jcard.js'
	]
	olRedLineJsFiles = [
		'nyc/ol/draw.js', 
		'nyc/ol/geoserver/getfeature.js', 
		'nyc/ol/geoserver/featuretxn.js',
	]
	leafJsFiles = [
		'nyc/nyc.js', 
		'nyc/date.js', 
		'nyc/util.js', 
		'nyc/basemap.js', 
		'nyc/ctlcontainer.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-choice.js',
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-check.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/dialog.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/locationmgr.js', 
		'nyc/share.js',
		'nyc/listpager.js',
		'nyc/zoomsearch.js',
		'nyc/info/info.js', 
		'nyc/info/renderer.js', 
		'nyc/leaf/leaf.js', 
		'nyc/leaf/basemap.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/locator.js', 
		'nyc/leaf/zoomsearch.js',
		'nyc/jcard/jcard.js'
	]
	cartoJsFiles = [
		'nyc/nyc.js', 
		'nyc/date.js', 
		'nyc/util.js', 
		'nyc/basemap.js', 
		'nyc/ctlcontainer.js', 
		'nyc/collapsible.js', 
		'nyc/collapsible-choice.js',
		'nyc/collapsible-radio.js', 
		'nyc/collapsible-check.js', 
		'nyc/collapsible-month-range.js', 
		'nyc/content.js', 
		'nyc/dialog.js', 
		'nyc/directions.js',
		'nyc/geocoder.js', 
		'nyc/lang.js', 
		'nyc/legend.js', 
		'nyc/locate.js', 
		'nyc/locationmgr.js', 
		'nyc/share.js',
		'nyc/listpager.js',
		'nyc/zoomsearch.js',
		'nyc/info/info.js', 
		'nyc/info/renderer.js', 
		'nyc/leaf/leaf.js', 
		'nyc/leaf/basemap.js', 
		'nyc/leaf/locate.js', 
		'nyc/leaf/locator.js', 
		'nyc/leaf/zoomsearch.js',
		'nyc/carto/carto.js',
		'nyc/carto/symbolizer.js',
		'nyc/carto/heatsymbolizer.js',
		'nyc/carto/jenkssymbolizer.js',
		'nyc/carto/chart.js',
		'nyc/carto/view.js',
		'nyc/carto/sqlview.js',
		'nyc/carto/popup.js',
		'nyc/jcard/jcard.js'
	]
	olCssFiles = [
		'nyc-base.css', 
		'control-common.css', 
		'collapsible.css', 
		'directions.css', 
		'dialog.css', 
		'draw.css', 
		'featuretip.css', 
		'lang.css', 
		'layermgr.css', 
		'layerfade.css', 
		'layerswipe.css', 
		'legend.css', 
		'mapmenu.css', 
		'ol-popup.css', 
		'info-renderer.css', 
		'share.css', 
		'zoomsearch.css'
	]
	olRedLineCssFiles = [
		'nyc-base.css', 
		'draw.css',
		'getfeature.css'
	]
	leafCssFiles = [
		'nyc-base.css', 
		'control-common.css', 
		'collapsible.css', 
		'dialog.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'info-renderer.css', 
		'share.css', 
		'zoomsearch.css'
	]
	cartoCssFiles = [
		'nyc-base.css', 
		'control-common.css', 
		'chart.css', 
		'collapsible.css', 
		'dialog.css', 
		'directions.css', 
		'lang.css', 
		'legend.css', 
		'info-renderer.css', 
		'share.css', 
		'carto-popup.css', 
		'zoomsearch.css'
	]
}

task npmPackage(type: NpmPackageTask) {
	packageFile = "${pkgDir}/package.json"
	libName = appName
	version = ver
	license = 'Apache-2.0'
	desc = 'A collection of javascript libraries used in the development New York City mapping applications'
	author = 'Tim Keane'
	contributors = []
	gitHubUrl = 'https://github.com/timkeane/nyc-lib/'
	keywords = ['ol3', 'OpenLayers', 'Carto', 'LeafletJS', 'ChartJS']
	dependencies = [
		OpenLayers: '> 3.11.0', 
		Carto: '> 3.14', 
		ChartJS: '> 1.0.1',
		proj4js: '> 2.3.10', 
		JQuery: '> 1.11.0', 
		JQueryMobile: '> 1.4.5',
		'jquery-csv': '0.71'
	]
}

task examples() << {
	copy {
		from 'examples'
		include '**'
		into "${pkgDir}/examples"
	}
	def examples = fileTree("${pkgDir}/examples")
	def jsexp = /<!-- nyc js -->([\s\S]*?)<!-- nyc js -->/
	def cssexp = /<!-- nyc css -->([\s\S]*?)<!-- nyc css -->/
	def geoid = ''
	def geokey = ''
	if (project.hasProperty('nyc-lib.example.geoclient.app.id')){
		geoid = project.ext['nyc-lib.example.geoclient.app.id']
		geokey = project.ext['nyc-lib.example.geoclient.app.key']
	}
	def host = "${localhost}${localhostDeployedBuildPath}"
	if (project.hasProperty('env')){
		host = project.ext["${env}.nyc-lib.host"]
	}
	examples.each{File file ->
		if (file.name.indexOf('.html') > -1) {
			def origHtml = file.text
			def newHtml = origHtml
			if (file.name.indexOf('ol-redline-') == 0){
				newHtml = (origHtml =~ jsexp).replaceFirst("<script src=\"${host}/nyc-lib/${ver}/js/nyc-ol-lib.js\"></script>\\n<script src=\"${host}/nyc-lib/${ver}/js/nyc-ol-redline-lib.js\"></script>")
				newHtml = (newHtml =~ cssexp).replaceFirst("<link rel=\"stylesheet\" href=\"${host}/nyc-lib/${ver}/css/nyc-ol-lib.css\">\\n<link rel=\"stylesheet\" href=\"${host}/nyc-lib/${ver}/css/nyc-ol-redline-lib.css\">")
			}else if (file.name.indexOf('ol-') == 0){
				newHtml = (origHtml =~ jsexp).replaceAll("<script src=\"${host}/nyc-lib/${ver}/js/nyc-ol-lib.js\"></script>")
				newHtml = (newHtml =~ cssexp).replaceAll("<link rel=\"stylesheet\" href=\"${host}/nyc-lib/${ver}/css/nyc-ol-lib.css\">")
			}else if (file.name.indexOf('carto-') == 0){
				newHtml = (origHtml =~ jsexp).replaceFirst("<script src=\"${host}/nyc-lib/${ver}/js/nyc-carto-lib.js\"></script>")
				newHtml = (newHtml =~ cssexp).replaceFirst("<link rel=\"stylesheet\" href=\"${host}/nyc-lib/${ver}/css/nyc-carto-lib.css\">")
			}else{
				newHtml = (origHtml =~ jsexp).replaceFirst("<script src=\"${host}/nyc-lib/${ver}/js/nyc-leaf-lib.js\"></script>")
				newHtml = (newHtml =~ cssexp).replaceFirst("<link rel=\"stylesheet\" href=\"${host}/nyc-lib/${ver}/css/nyc-leaf-lib.css\">")
			}
			newHtml = (newHtml =~ /YOUR_APP_ID/).replaceFirst(geoid)
			newHtml = (newHtml =~ /YOUR_APP_KEY/).replaceFirst(geokey)
			newHtml = (newHtml =~ /\.\.\/src\/main\/js/).replaceAll("${host}/nyc-lib/${ver}/js") //takes care of scripts from this project not bundled into a -lib.js  
			file.write(newHtml)
		}
	}
}

task jsDoc(type: JsDocTask, dependsOn: [npmPackage, examples]) {
	def host = 'https://maps.nyc.gov'
	if (project.hasProperty('env') && project.hasProperty("${env}.nyc-lib.host")){
		host = project.ext["${env}.nyc-lib.host"]
	}
	sourceDir = "src/main/js/nyc"
	packageFile = "${pkgDir}/package.json"
	destinationDir = "build/jsdoc"
	conf = 'etc/jsdoc/conf.json'
	doFirst {
		file('build/jsdoc').mkdirs()
		def tmpl = file('build/jsdoc/layout.tmpl')
		tmpl << file('etc/jsdoc/layout.tmpl').text
		tmpl.text = tmpl.text.replaceAll('@@NYC-LIB-VER@@', ver)
		tmpl.text = tmpl.text.replaceAll('@@NYC-LIB-URL@@', "${host}/${ver}")
	}
	doLast {
		copy {
			from "${buildDir}/jsdoc/${appName}/${ver}"
			include '**'
			into "${pkgDir}/doc"
		}
		delete 'build/jsdoc'
		ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: "${pkgDir}/examples/ol-facility-container-min.html", token: '../doc/', value: "${host}/nyc-lib/${ver}/doc/")
		ant.replace(file: "${pkgDir}/examples/ol-facility-container.html", token: '../doc/', value: "${host}/nyc-lib/${ver}/doc/")
	}
}

task minifyJsOl(type: MiniJsTask) {
	version = ver
	libName = 'nyc-ol-lib'
	fileNames = olJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}
minifyJsOl.doLast {
	if (project.hasProperty('local.tile.host')){
		tilehost = project.ext['local.tile.host']
	}
	if (project.hasProperty('env')){
		tilehost = project.ext["${env}.tile.host"]
		if (env == 'stg'){
			/* change URLs for basemap tiles */
		    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps1.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps2.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '//maps3.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps1.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps2.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
			ant.replace(file: "${pkgDir}/src/js/nyc/ol/layer/baselayer.js", token: '//maps3.nyc.gov/gis/data/tiles/', value: '/gis/data/tiles/')
		}
	}
	
	/* change URLs for basemap tiles */
	ant.replace(file: "${pkgDir}/js/nyc-ol-lib.js", token: '/tms/', value: "${tilehost}/tms/")
	ant.replace(file: "${pkgDir}/src/js/nyc/ol/basemap.js", token: '/tms/', value: "${tilehost}/tms/")
	
	ant.replace(file: "${pkgDir}/js/nyc-leaf-lib.js", token: '/tms/', value: "${tilehost}/tms/")
	ant.replace(file: "${pkgDir}/src/js/nyc/leaf/basemap.js", token: '/tms/', value: "${tilehost}/tms/")

	ant.replace(file: "${pkgDir}/js/nyc-leaf-lib.js", token: '{1-4}', value: '{s}')
	ant.replace(file: "${pkgDir}/src/js/nyc/leaf/basemap.js", token: '{1-4}', value: {s})
}

task minifyJsOlRedLine(type: MiniJsTask) {
	version = ver
	libName = 'nyc-ol-redline-lib'
	fileNames = olRedLineJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}

task minifyJsLeaf(type: MiniJsTask) {
	version = ver
	libName = 'nyc-leaf-lib'
	fileNames = leafJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}

task minifyJsCarto(type: MiniJsTask) {
	version = ver
	libName = 'nyc-carto-lib'
	fileNames = cartoJsFiles
	sourceDir = jsSrcDir
	destinationDir = "${pkgDir}/js"
}

task minifyCssOl(type: MiniCssTask) {
	libName = 'nyc-ol-lib'
	themeFile = 'theme.css'
	fileNames = olCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task minifyCssOlRedLine(type: MiniCssTask) {
	libName = 'nyc-ol-redline-lib'
	themeFile = 'theme.css'
	fileNames = olRedLineCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task minifyCssLeaf(type: MiniCssTask) {
	libName = 'nyc-leaf-lib'
	themeFile = 'theme.css'
	fileNames = leafCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task minifyCssCarto(type: MiniCssTask) {
	libName = 'nyc-carto-lib'
	themeFile = 'theme.css'
	fileNames = cartoCssFiles
	sourceDir = cssSrcDir
	destinationDir = "${pkgDir}/css"
}

task allJs(dependsOn: [minifyJsOl, minifyJsOlRedLine, minifyJsLeaf, minifyJsCarto]) << {}
allJs.doLast {
	copy {
		from srcDir
		include 'js/nyc/ie/legacy/mutationobserver.js'
		include 'js/nyc/info/template/*'
		include 'js/nyc/ol/style/**'
		include 'js/nyc/ol/layer/group/**'
		into "${pkgDir}/src"
	}
	copy {
		from srcDir
		include 'js/nyc/ie/legacy/mutationobserver.js'
		include 'js/nyc/info/template/*'
		include 'js/nyc/ol/style/**'
		include 'js/nyc/ol/layer/group/**'
		exclude 'js/nyc/ol/style/mvt.js'
		into pkgDir
	}
}

task allCss(dependsOn: [minifyCssOl, minifyCssOlRedLine, minifyCssLeaf, minifyCssCarto]) << {}
allCss.doLast {
	copy {
		from srcDir
		include 'img/**'
		into pkgDir
	}
	copy {
		from srcDir
		include 'img/**'
		into "${pkgDir}/src"
	}
}
task buildLibs(dependsOn: [allJs, allCss]) << {}

task archiveIframeExample(type: Zip, dependsOn: [buildLibs, jsDoc]) {
	archiveName = "nyc-lib-iframe-example-${ver}.zip"
	from ("${pkgDir}/examples")
	include 'ol-facility-*'
	include 'data/upk.csv'
	include 'js/*'
	include 'css/*'
	include 'img/*'
}

task archive(type: Zip, dependsOn: [archiveIframeExample]) {
	archiveName = "nyc-lib-${ver}.zip"
	from {pkgDir}
}

remotes {
	deployTarget {}
}

task deploy(dependsOn: [archive]) << {
	def mobileDir = project.ext['mobile.dir']
	def archiveDir = "${mobileDir}/${appName}/archive"
	def deployDir = "${mobileDir}/${remoteDir}"
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir -p ${archiveDir}"
        	execute "mkdir -p ${deployDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            put "build/distributions/${archiveIframeExample.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
            execute "ls -I *.html -I archive ${mobileDir}/${appName} > ${mobileDir}/${appName}/index.html"
            get "${mobileDir}/${appName}/index.html", 'index.list'
		}
	}
	
	def index = file('index.html')
	index.append '<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="twitter:card" content="summary_large_image"><meta prefix="og: http:/ogp.me/ns#" property="og:title" content="nyc-lib"><meta prefix="og: http:/ogp.me/ns#" property="og:type" content="website"><meta prefix="og: http:/ogp.me/ns#" property="og:url" content="https://maps.nyc.gov/nyc-lib"><meta prefix="og: http:/ogp.me/ns#" property="og:image" content="https://maps.nyc.gov/nyc-lib/archive/og.png"><meta prefix="og: http:/ogp.me/ns#" property="og:image:width" content="1200"><meta prefix="og: http:/ogp.me/ns#" property="og:image:height" content="626"><meta prefix="og: http:/ogp.me/ns#" property="og:description" content="A collection of javascript libraries used in the development New York City mapping applications."><meta prefix="og: http:/ogp.me/ns#" property="og:site_name" content="maps.nyc.gov"><title>nyc-lib</title><style>html{background:url(archive/mtc.png) no-repeat center center fixed;-webkit-background-size:cover;-moz-background-size:cover;-o-background-size:cover;background-size:cover;}html,body{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;}#banner{width:3.2em;background-image:url(archive/nyc.svg);background-repeat:no-repeat;background-size:3em;}#banner span{position:relative;left:0;top:1em;font-size:.44em;font-weight:bold;}h1{display:inline-block;}a,a:visited{color:#800000;text-decoration:none;font-weight:600;}a:hover,a:active{color:red;}.latest-stable{color:green;}</style><script src="https://code.jquery.com/jquery-1.11.3.min.js"></script><script>function toggle(a){$("#older").slideToggle(function(){$(a).html($("#older").css("display") == "block" ? "Hide older versions..." : "Show older versions...");});}</script></head><body><h1 id="banner"><span>maps.nyc.gov</span>&nbsp;</h1><h1>nyc-lib</h1>'
	def list = file('index.list')
	def versions = []
	def line
	list.withReader { reader ->
		while ((line = reader.readLine()) != null) {
			if (line.indexOf('-') == -1){
				line = line + '-X'
			}
			versions.add(line)
		}
	}
	
	def i = 0
	def latetestStable = false
	Collections.sort(versions, Collections.reverseOrder())
	versions.forEach { aVer ->
		def name = aVer
		if (i == 3){
			index.append '<a href="#" onclick="toggle(this);">Show older versions...</a><div id="older">'		
		}
		i++
		if (aVer.indexOf('-X') > -1){
			aVer = aVer.replace('-X', '')
			name = name.replace('-X', '')
			if (!latetestStable){
				name = "${name} <span class='latest-stable'>(latest stable)</span>"
				latetestStable = true
			}
		}
		index.append "<h3>${name}</h3>"
		index.append '<ul>'
		index.append "<li><a href=\"${aVer}/doc/index.html\">Documentation</a></li>"
		index.append "<li><a href=\"${aVer}/examples/index.html\">Examples</a></li>"
		index.append "<li><a href=\"archive/nyc-lib-${aVer}.zip\">nyc-lib-${aVer}.zip</a></li>"
		if (aVer.split('-')[0].split(' ')[0].substring(1).replace(/./, '').toInteger() >= 11){
			index.append "<li><a href=\"archive/nyc-lib-iframe-example-${aVer}.zip\">nyc-lib-frame-example-${aVer}.zip</a></li>"
		}
		index.append '</ul>'
	}
	index.append '</div></body></html>'

	ssh.run {
        session(remotes.deployTarget) {
            put 'index.html', "${mobileDir}/${appName}"
        }
    }
    delete 'index.html'
    delete 'index.list'
}

task wrapper(type: Wrapper) {
    gradleVersion '3.1'
}
