import groovy.util.AntBuilder

plugins {
    id 'base'
    id 'jetty'
    id 'org.hidetake.ssh' version '1.1.2'
	id 'com.eriwen.gradle.css' version '1.11.1'
}

repositories {
  mavenCentral() //or jcenter()
}
configurations {
  closureCompiler
}
dependencies {
  closureCompiler 'com.google.javascript:closure-compiler:v20150609'
}

ext {
	ver = 'v0.0.1-beta.2'
	remoteDir = "nyc-lib/${ver}"
	jsSrcDir = 'src/main/js/nyc'
	cssSrcDir = 'src/main/css'
	olJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/ol/ol.js", 
		"${jsSrcDir}/ol/draw.js", 
		"${jsSrcDir}/ol/featuretip.js", 
		"${jsSrcDir}/ol/locate.js", 
		"${jsSrcDir}/ol/popup.js", 
		"${jsSrcDir}/ol/control/zoomsearch.js",
		"${jsSrcDir}/ol/geoserver/getfeature.js", 
		"${jsSrcDir}/ol/source/arcgiscache.js", 
		"${jsSrcDir}/ol/source/decorating.js", 
		"${jsSrcDir}/ol/source/filteringandsorting.js",
		"${jsSrcDir}/ol/layer/baselayer.js"
	]
	leafJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/leaf/leaf.js", 
		"${jsSrcDir}/leaf/locate.js", 
		"${jsSrcDir}/leaf/zoomsearch.js"
	]
	cartoJsFiles = [
		"${jsSrcDir}/nyc.js", 
		"${jsSrcDir}/collapsible.js", 
		"${jsSrcDir}/collapsible-radio.js", 
		"${jsSrcDir}/collapsible-month-range.js", 
		"${jsSrcDir}/content.js", 
		"${jsSrcDir}/directions.js",
		"${jsSrcDir}/geocoder.js", 
		"${jsSrcDir}/lang.js", 
		"${jsSrcDir}/legend.js", 
		"${jsSrcDir}/locate.js", 
		"${jsSrcDir}/share.js",
		"${jsSrcDir}/zoomsearch.js",
		"${jsSrcDir}/leaf/leaf.js", 
		"${jsSrcDir}/leaf/locate.js", 
		"${jsSrcDir}/leaf/zoomsearch.js",
		"${jsSrcDir}/carto/view.js",
		"${jsSrcDir}/carto/chart.js"
	]
	olCssFiles = [
		"${cssSrcDir}/control-common.css", 
		"${cssSrcDir}/collapsible.css", 
		"${cssSrcDir}/directions.css", 
		"${cssSrcDir}/draw.css", 
		"${cssSrcDir}/featuretip.css", 
		"${cssSrcDir}/lang.css", 
		"${cssSrcDir}/legend.css", 
		"${cssSrcDir}/popup.css", 
		"${cssSrcDir}/share.css", 
		"${cssSrcDir}/zoomsearch.css"
	]
	leafCssFiles = [
		"${cssSrcDir}/control-common.css", 
		"${cssSrcDir}/collapsible.css", 
		"${cssSrcDir}/directions.css", 
		"${cssSrcDir}/lang.css", 
		"${cssSrcDir}/legend.css", 
		"${cssSrcDir}/share.css", 
		"${cssSrcDir}/zoomsearch.css"
	]
	cartoCssFiles = [
		"${cssSrcDir}/control-common.css", 
		"${cssSrcDir}/chart.css", 
		"${cssSrcDir}/collapsible.css", 
		"${cssSrcDir}/directions.css", 
		"${cssSrcDir}/lang.css", 
		"${cssSrcDir}/legend.css", 
		"${cssSrcDir}/share.css", 
		"${cssSrcDir}/zoomsearch.css"
	]
	closureArgs = [
		'--charset=utf8',
		'--warning_level=VERBOSE',
		'--compilation_level=WHITESPACE_ONLY'
	]
	currentLib = 'leaf'
}

task minifyJsOl(type: MinifyJavaScript) {
	version = ver
	libName = 'nyc-ol-lib'
	fileNames = olJsFiles
	destinationDir = "${buildDir}/${ver}/js"
}

task minifyJsLeaf(type: MinifyJavaScript) {
	version = ver
	libName = 'nyc-leaf-lib'
	fileNames = leafJsFiles
	destinationDir = "${buildDir}/${ver}/js"
}

task minifyJsCarto(type: MinifyJavaScript) {
	version = ver
	libName = 'nyc-carto-lib'
	fileNames = leafJsFiles
	destinationDir = "${buildDir}/${ver}/js"
}

task minifyCssOl(type: MinifyStyleSheet) {
	libName = 'nyc-ol-lib'
	fileNames = olCssFiles
	destinationDir = "${buildDir}/${ver}/css"
}

task minifyCssLeaf(type: MinifyStyleSheet) {
	libName = 'nyc-leaf-lib'
	fileNames = leafCssFiles
	destinationDir = "${buildDir}/${ver}/css"
}

task minifyCssCarto(type: MinifyStyleSheet) {
	libName = 'nyc-carto-lib'
	fileNames = cartoCssFiles
	destinationDir = "${buildDir}/${ver}/css"
}

task allJs(dependsOn: [minifyJsOl, minifyJsLeaf, minifyJsCarto]) << {}
task allCss(dependsOn: [minifyCssOl, minifyCssLeaf, minifyCssCarto]) << {}

task prepareFiles(dependsOn: [allJs, allCss]) << {}
prepareFiles.doFirst {
	copy {
			from 'src/main'
			include '**'
			into "${buildDir}/${ver}/src"
		}
}

task doc() << {
	println '\nbuilding jsDoc...\n'
	exec {commandLine = [Docs.script(buildDir, ver)]}
	println ''
}

task archive(type: Zip, dependsOn: [doc, prepareFiles]) {
	archiveName = "nyc-lib-${ver}.zip"
	from {"${buildDir}/${ver}"}
}
archive.doFirst {
	copy {
		from 'build'
		include '*.debug.js'
		into "${buildDir}/${ver}"
	}
}


remotes {
	deployTarget {}
}

task deploy(dependsOn: []) << {
	def archiveDir = project.ext['archive.dir']
	def mobileDir = project.ext['mobile.dir']
	def deployDir = "${mobileDir}/${remoteDir}"
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir ${archiveDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.9'
}

class Docs {
	static String jsdocDir = '../jsdoc'
	static AntBuilder ant = new AntBuilder()
	static String script(File buildDir, String ver){
		def docs = new File("${buildDir}/${ver}/doc")
		def tmp = new File("${buildDir}/tmp")
		def scriptName = "${buildDir}/tmp/doc.sh"
		docs.mkdirs()
		tmp.mkdirs()
		def script = new File(scriptName)
		script.text = "cd ${jsdocDir}\n" +
			"./jsdoc --verbose --recurse ../nyc-lib/src/main/js/nyc/ " +
			"--destination ../nyc-lib/build/${ver}/doc\n"
		ant.sequential{
			move(file: scriptName, tofile: 'doc.sh')
			chmod(file: 'doc.sh', perm: '0755')
		}
		return './doc.sh'
	}
}

class MinifyStyleSheet extends DefaultTask {
	def libName = ''
	def fileNames = []
	def destinationDir = ''
	@TaskAction
	public void minify(){
		def dir = new File(destinationDir)
		dir.mkdirs()
		def cssOut = new File("${destinationDir}/${libName}.css")
		fileNames.each{ file ->
			def css = new File(file).getText('UTF-8')
			css = css.replaceAll(/[\n\r]+\s*/, '')
			css = css.replaceAll(/\s+/, ' ')
			css = css.replaceAll(/\s?([:,;{}])\s?/, '$1')
			css = css.replaceAll(/([\s:]0)(px|pt|%|em)/, '$1')
			css = css.replaceAll(/\/\*[\d\D]*?\*\//, '')
			cssOut.append(css)
		}		
	}
}

class MinifyJavaScript extends JavaExec {
	def libName = ''
	def version = ''
	def fileNames = []
	def destinationDir = ''
	def compilationLevel = 'WHITESPACE_ONLY'
	def warningLevel = 'VERBOSE'
	def sourceMapLocationMapping = 'src/main/js/nyc/|../src/js/nyc/' //todo can we set to 'src/main/js/|../src/js/' 
	def compilerOptions = []
	public MinifyJavaScript() {
		main 'com.google.javascript.jscomp.CommandLineRunner'
		classpath project.configurations.closureCompiler
	}
	@TaskAction
	@Override
	public void exec(){
		def arguments = []
		for (def i = 0; i < fileNames.size(); i++) { //todo can we use diff loop syntax
		  	arguments << fileNames[i]
		}
		for (def i = 0; i < compilerOptions.size(); i++) {
		  	arguments << compilerOptions[i]
		}
		arguments << '--charset=utf8'
		arguments << "--warning_level=${warningLevel}"
		arguments << "--compilation_level=${compilationLevel}"
		arguments << "--create_source_map=${libName}.sourcemap.json"
		arguments << "--js_output_file=${libName}.js"  
		arguments << "--source_map_location_mapping=\"${sourceMapLocationMapping}\""
		arguments << "--output_wrapper=\"/* ${libName}-${version} */ %output% //# sourceMappingURL=${libName}.sourcemap.json\""
		println arguments
		args arguments
		super.exec();
		this.move()
	}
	private void move(){
		def dir = new File(destinationDir)
		dir.mkdirs()
		ant.move(file: "${libName}.js", todir: destinationDir)
		ant.move(file: "${libName}.sourcemap.json", todir: destinationDir)	
	}
}